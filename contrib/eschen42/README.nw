%!/bin/bash -i
@

# Motivation

Conda ([https://conda.io/](https://conda.io/)) packages provide command-line software packaged into reproducible, pre-built environments to ensure that the dependencies are met for the packaged software.

I want to create a `noweb` Conda package, eventually.  This work is a prerequisite for that.

I have previously created packages for `The Icon Programming Language` ([https://www2.cs.arizona.edu/icon/](https://www2.cs.arizona.edu/icon/)) in Linux ([https://anaconda.org/conda-forge/icon](https://anaconda.org/conda-forge/icon)) and Windows x64 ([https://anaconda.org/eschen42/icon](https://anaconda.org/eschen42/icon)).

This file describes how to create an Icon-native `noweb` implementation that can be built into a Conda environment.

## N.B.: Executable lines in README.nw

Code listings beginning with a line that starts with "&lt;<*>>=" are extracted for execution.

## N.B.: Bootstrapping the script to build `noweb`

This `README.nw` can be processed by `noweb` to produce a `bash` script that can build `noweb`.  That begs the question of how to create the script without `noweb`.  The answer is to use `sed` to extract the script, e.g., with the command:

```bash
<<*>>=

cat >bootstrap.sh <<'EOF'
# bootstrap the noweb conda build without having noweb
bash -i <(sed -e '1 s/^%/#/; /^@/,/^[<][<]/ d' README.nw) > bootstrap_log.txt
EOF
@
```

Note that the preceding line of code is NOT extracted or executed from `README.nw`.

# Building `noweb` within Conda

## Step 0: install Conda if necessary

Because I plan release this through the `conda-forge` conda channel ([https://conda-forge.org/](https://conda-forge.org/)), I install the `miniforge` distribution, specifically the Mamba/PyPy3 variant ([https://github.com/conda-forge/miniforge/#mambaforge-pypy3](https://github.com/conda-forge/miniforge/#mambaforge-pypy3)).

```sh
<<*>>=

# Adjust the name of the conda enviroment if you so desire
NOWEB_ENV_NAME=noweb

# You may choose to alter these depending on which version
#   of miniconda/miniforge you wish to install
CONDA=mamba
MAMBA_ROOT=~/mambaforge-pypy3
MAMBA_INSTALLER_SH="Mambaforge-pypy3-$(uname)-$(uname -m).sh"

# make sure that this is invoked interactively
#   ref: https://serverfault.com/a/146747
echo "$-" | grep '.*i.*' > /dev/null
if [ 0 -ne $? ]; then
  echo "$0:" '$- is "'"$-"'".'
  echo "It is necessary to invoke $0 with bash and the '-i' option, e.g.:"
  echo "   bash -i '. forge_fetch.sh'"
  exit 1
fi

# install conda framework if not installed already
which $CONDA > /dev/null
if [ 0 -ne $? ]; then
  if [ -z "$CONDA_PREFIX" ]; then
    if [ ! -d ${MAMBA_ROOT} ]; then
      if [ ! -f $MAMBA_INSTALLER_SH ]; then
        curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/$MAMBA_INSTALLER_SH"
        if [ ! -f $MAMBA_INSTALLER_SH ]; then
          echo "Failed to download $MAMBA_INSTALLER_SH"
          exit 1
          fi
        fi
      bash $MAMBA_INSTALLER_SH -b
      . ${MAMBA_ROOT}/bin/activate
      $CONDA init bash
      echo "Please execute:"
      echo "  bash -lic '. $0'" 
      echo "Then log out (or do the equivalent); then please call $0 again."
      exit 1
      fi
    fi
  if [ -z "$CONDA_PREFIX" ]; then
    if [ ! -f ${MAMBA_ROOT}/bin/activate ] ; then
      echo cannot find ${MAMBA_ROOT}/bin/activate
      exit 1
      fi
    . ${MAMBA_ROOT}/bin/activate
    fi
  if [ 0 -ne $? ] ; then
    echo failed to activate $CONDA_PREFIX/bin/activate
    exit 1
    fi
  fi
# now we have mamba or conda; decide which
which $CONDA > /dev/null
if [ 0 -ne $? ]; then
  echo cannot proceed because $CONDA not found on path
  exit 1
  fi
@
```

## Step 1: install or build `noweb` Conda environmnt

Build the conda environment named `noweb` if it does not exist and is also unavailable on conda-forge

```sh
<<*>>=

conda activate $NOWEB_ENV_NAME
# install the noweb environment from conda-forge if possible
if [ 0 -ne $? ]; then
  echo $CONDA create -n $NOWEB_ENV_NAME -y -c conda-forge noweb
  fi
# only create noweb environment if it still does not exist
conda activate $NOWEB_ENV_NAME
if [ 0 -ne $? ]; then
  $CONDA create -n $NOWEB_ENV_NAME -c conda-forge make binutils gcc icon
  fi

@
```

## Step 2: activate the `noweb` Conda environmnt

Activate the conda "noweb" environment

```sh
<<*>>=

conda activate $NOWEB_ENV_NAME
if [ 0 -ne $? ]; then
  echo $CONDA could neither create nore install $NOWEB_ENV_NAME 
  exit 1
  fi
@
```

## Step 3: build `noweb` (finally)

### `conda_make`

Building `noweb` in the `noweb` Conda environment required
some specializations for `make`, which it applies
before and after invoking `make`.

`conda_make` provides these:

```sh
<<*>>=

cat >conda_make <<'EOF'
#!/bin/sh

# set default args
if [ $# -eq 0 ]; then set all install; fi  # "$@" breaks make for empty args

# find location of heads from location of this script
GIT_BASE=$(dirname $(readlink -f $0))/../../.git
GIT_HEADS=${GIT_BASE}/refs/heads
GIT_MASTER=${GIT_HEADS}/master

# find /usr/local/bin or equivalent, e.g., $CONDA_PREFIX/bin
NOWEB_BASE="$(dirname $(dirname $(readlink -f $(which make))))"

# hack to install without pre-existing ../../.git
if [ ! -e ${GIT_BASE} ]; then
  TEMP_HEADS_BASE=${GIT_BASE}
  mkdir -p $GIT_HEADS && echo "created $GIT_HEADS"
  1>&2 echo "Please disregard messages about 'not a Git repository'"
else
  TEMP_HEADS_BASE=''
  fi

# hack to install without pre-existing ../../.git/refs/heads/master
if [ ! -e ${GIT_MASTER} ]; then
  TEMP_HEADS_MASTER=${GIT_MASTER}
  echo '' > $TEMP_HEADS_MASTER && echo "created $TEMP_HEADS_MASTER"
else
  TEMP_HEADS_MASTER=''
  fi

# hack to install without texlive installed
which texhash || TEMP_TEXHASH=1
if [ ! -z "$TEMP_TEXHASH" ]; then
  mkdir -p "$NOWEB_BASE/bin"
  echo 'exit 0' > "$NOWEB_BASE/bin/texhash"
  chmod +x "$NOWEB_BASE/bin/texhash" && echo "created $NOWEB_BASE/bin/texhash"
  fi

# declare make invocation
make_invocation ()
{
  `which make` \
    BIN="$NOWEB_BASE/bin" \
    CC='gcc -pedantic -O -Wall -Werror' \
    LIB="$NOWEB_BASE/lib/noweb" \
    LIBSRC=icon \
    MAN="$NOWEB_BASE/man" \
    TEXINPUTS="$NOWEB_BASE/lib/tex/inputs" \
    "$@"
}

# make ('make all install' by default)
make_invocation
RESULT=$?

# revert hack to install without texlive installed
if [ ! -z "$TEMP_TEXHASH" ]; then
  rm "$NOWEB_BASE/bin/texhash" && echo "removed $NOWEB_BASE/bin/texhash"
  fi

# revert hack to install without pre-existing ../../.git/refs/heads/master
if [ ! -z "$TEMP_HEADS_MASTER" ]; then
  rm $TEMP_HEADS_MASTER && echo "removed $TEMP_HEADS_MASTER"

  fi

# revert hack to install without pre-existing ../../.git
if [ ! -z "$TEMP_HEADS_BASE" ]; then
  rm -rf $TEMP_HEADS_BASE && echo "removed $TEMP_HEADS_BASE"
  fi

# produce result of make
echo exit $RESULT
exit $RESULT
EOF

@
```

### build `noweb` using `conda_make`

This will extract and show the code in this README.nw file.

```sh
<<*>>=
chmod +x conda_make
pushd ../../src > /dev/null
ln -f -s ../contrib/eschen42/conda_make conda_make
./conda_make all install
popd > /dev/null
@
```

## Step 4: demonstrate `noweb` with this file

This will extract and show the code in this README.nw file.

```sh
<<*>>=

conda activate $NOWEB_ENV_NAME
if [ 0 -ne $? ]; then
  echo $CONDA could not activate $NOWEB_ENV_NAME 
  exit 1
  fi
echo '#!'"/bin/bash -i" > README.sh
notangle README.nw >> README.sh
sed -e '1 s/^%/#/; /^@/,/^[<][<]/ d' README.nw > README.sh.expected
#echo foo >> README.sh.expected
which md5sum > /dev/null
if [ 0 -ne $? ]; then
  1>&2 echo wc README.sh.expected README.sh
  1>&2 wc README.sh.expected README.sh
else
  1>&2 echo md5sum README.sh.expected README.sh
  1>&2 md5sum README.sh.expected README.sh
  fi
diff README.sh.expected README.sh > README.sh.diff
RESULT=$?
if [ 0 -ne $RESULT ]; then
  1>&2 echo "diff of results with expectations:"
  1>&2 more README.sh.diff
else
  rm README.sh.expected README.sh
  cat <(echo '#!/bin/bash -i') <(nountangle -icn README.nw) > README.sh
  fi
exit $RESULT
@
```

Also note that Greyson Fischer's
[`noscript`](https://github.com/nrnrnr/noweb/blob/master/contrib/fischer/noscript-0.1/noscript)
command could be used to execute `README.nw` directly, e.g.:
```sh
noscript README.nw
```

The final line of README.nw is here to support boostrapping with `sed`.

<<*>>=
